''' Flips the grid from row-wise numbering to col-wise numbering
The grid generated by the qgis grid function enumarates col-wise and he patch function I wrote enumerates row-wise.'''


import rasterio as rio
import geopandas as gpd

from patchify import patchify

import numpy as np
import pandas as pd
import argparse


# PARSE files 
parse = argparse.ArgumentParser()
parse.add_argument("-i", "--input", nargs='+', type=str, help="Image paths", required=True)
# parse.add_argument("-o", "--output", type=str, help="output path", required=True)
args = parse.parse_args()
IMAGES_PATH  = args.input[0]
gpkg_path = args.input[1]
# output = args.output

# READ FILES 
geo_df = gpd.read_file(gpkg_path)

with rio.open(IMAGES_PATH) as src:
    data = src.read().astype('uint8')
    ras_meta = src.profile
    
ras_meta['year'] = '1942'

# get the patches 
patch_size=(256,256)
patches = patchify(data[0], patch_size, step=patch_size[0])

# Get top left bounds 
# Total number of patches
total_n_patches = np.concatenate(patches).shape[0]

# Array to store the new top left bounds
n_patches = np.zeros((total_n_patches, 2))

rows = patches.shape[0]
cols = patches.shape[1]

i, p, z = 0, 0, 0
for x in range(rows):
    x += z # update X after concluding all columns for one row
    for y in range(cols):
        # get the position in spatial coords
        new_x, new_y = src.xy(x, y + i)
        # assign the spatial coords to an empty array
        n_patches[p] = new_x, new_y 
    
        i+=(patch_size[0]-1)  # number of pixels to add (go left + 255 pixels)
        p+=1  # adding up to total number of patches

    z += (patch_size[0]-1) # to update X (go down -255 pixels after each row)
    i = 0 # set to zero again after reading each row

# Np array to pandas to get the left and top information (KEY)
df = pd.DataFrame(n_patches, columns=['left', 'top']).reset_index()

# get the key
df['key'] = df['left'].astype(str) + df['top'].astype(str) 

# round top and left columns 
geo_df['left'] = round(geo_df['left'], 0)
geo_df['top'] = round(geo_df['top'], 0)
geo_df['key'] = geo_df['left'].astype(str) + geo_df['top'].astype(str) 
print(geo_df.head(2))

# join or merge based on two columns 

new_df = geo_df.merge(df, on='key')
new_df.to_csv('coords.csv')

# save to csv 
new_df.to_file(filename='patch_keys.gpkg', driver='GPKG')