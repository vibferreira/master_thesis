
Training the network for 5 epochs, with a batch size of 8

Training Epoch [0/5]:  57%|▌| 4/7 [00:03<00:02,  1.42it/s, acc=0.83891106, dice=0.7635298, iou=0.6175076,
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])

torch.Size([1, 256, 256])
Training Epoch [1/5]:  43%|▍| 3/7 [00:01<00:01,  2.99it/s, acc=0.7234688, dice=0.41343206, iou=0.26058263
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])

torch.Size([1, 256, 256])
Training Epoch [2/5]:  71%|▋| 5/7 [00:01<00:00,  3.31it/s, acc=0.7707958, dice=0.4662453, iou=0.30398947,
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])


  0%|                                                                              | 0/4 [00:00<?, ?it/s]
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])

Training Epoch [4/5]:  43%|▍| 3/7 [00:01<00:01,  2.67it/s, acc=0.77820396, dice=0.50801533, iou=0.3404963
torch.Size([1, 256, 256])

Validation Epoch [4/5]:  50%|▌| 2/4 [00:00<00:00,  3.84it/s, acc_val=0.83776283, iou_val=0.5068729, loss_
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])
torch.Size([1, 256, 256])

torch.Size([1, 256, 256])
Exception in thread NetStatThr:
Traceback (most recent call last):
  File "/share/etud/e2008984/miniconda3/envs/torch_env/lib/python3.9/threading.py", line 973, in _bootstrap_inner
    self.run()
  File "/share/etud/e2008984/miniconda3/envs/torch_env/lib/python3.9/threading.py", line 910, in run
    self._target(*self._args, **self._kwargs)
  File "/share/etud/e2008984/miniconda3/envs/torch_env/lib/python3.9/site-packages/wandb/sdk/wandb_run.py", line 149, in check_network_status
    status_response = self._interface.communicate_network_status()
  File "/share/etud/e2008984/miniconda3/envs/torch_env/lib/python3.9/site-packages/wandb/sdk/interface/interface.py", line 125, in communicate_network_status
    resp = self._communicate_network_status(status)
  File "/share/etud/e2008984/miniconda3/envs/torch_env/lib/python3.9/site-packages/wandb/sdk/interface/interface_shared.py", line 397, in _communicate_network_status
    resp = self._communicate(req, local=True)
  File "/share/etud/e2008984/miniconda3/envs/torch_env/lib/python3.9/site-packages/wandb/sdk/interface/interface_shared.py", line 222, in _communicate
    return self._communicate_async(rec, local=local).get(timeout=timeout)
  File "/share/etud/e2008984/miniconda3/envs/torch_env/lib/python3.9/site-packages/wandb/sdk/interface/interface_shared.py", line 227, in _communicate_async
    raise Exception("The wandb backend process has shutdown")
